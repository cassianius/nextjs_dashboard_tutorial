generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@index([email])
  @@index([token])
}

model User {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  first      String
  last       String
  email      String   @unique
  password   String
  role       String
  account_id String
  account    Account  @relation(fields: [account_id], references: [id])

  @@map("users")
}

model Account {
  id                String      @id @default(uuid())
  created_at        DateTime    @default(now())
  updated_at        DateTime    @default(now())
  type              String
  status            String      @default("active")
  subscription_tier String      @default("free")
  metadata          Json?
  interviews        Interview[]
  sessions          Session[]
  users             User[]

  @@map("accounts")
}

model Interview {
  id                  Int             @id @default(autoincrement())
  created_at          DateTime        @default(now())
  updated_at          DateTime        @default(now())
  account_id          String
  company_name        String
  company_description Json?
  job_name           String
  job_description    Json?
  focus_areas        FocusArea[]
  max_duration       Int
  interviewer_style  String  //Friendly, Formal, Probing
  status             String  //Draft, Active, Archived, Deleted
  account            Account         @relation(fields: [account_id], references: [id])
  applicants         Applicant[]
  Access             SessionAccess[]
  Session            Session?

  @@map("interviews")
}

model Applicant {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  name         String
  email        String
  phone        String
  resume       Json?
  interview_id Int
  interview    Interview @relation(fields: [interview_id], references: [id])

  @@map("applicants")
}

model Session {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now())
  account_id   String
  interview_id Int       @unique
  pin          String
  start_date   DateTime
  end_date     DateTime
  completed    Boolean
  interview    Interview @relation(fields: [interview_id], references: [id])
  Account      Account[]

  @@map("session")
}

model SessionAccess {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now())
  account_id   String
  interview_id Int
  access_code  String    @unique
  pin          String
  expiration   DateTime
  interview    Interview @relation(fields: [interview_id], references: [id])

  @@map("session_access")
}

enum FocusArea {
  TECHNICAL_SKILLS
  PROBLEM_SOLVING
  COMMUNICATION
  ROLE_ALIGNMENT
  CULTURAL_FIT
  LEADERSHIP
  PROJECT_EXPERIENCE
  SYSTEM_DESIGN
  CODE_QUALITY
  BEHAVIORAL
  TEAM_COLLABORATION
  INITIATIVE
}